package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.vpfinance.vpjr.greendao.InvestRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVEST_RECORD".
*/
public class InvestRecordDao extends AbstractDao<InvestRecord, Long> {

    public static final String TABLENAME = "INVEST_RECORD";

    /**
     * Properties of entity InvestRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Page = new Property(1, long.class, "page", false, "PAGE");
        public final static Property PageSize = new Property(2, long.class, "pageSize", false, "PAGE_SIZE");
        public final static Property TotalPage = new Property(3, long.class, "totalPage", false, "TOTAL_PAGE");
        public final static Property Iid = new Property(4, long.class, "iid", false, "IID");
        public final static Property LoanType = new Property(5, int.class, "loanType", false, "LOAN_TYPE");
        public final static Property IsSucceed = new Property(6, int.class, "isSucceed", false, "IS_SUCCEED");
        public final static Property Product = new Property(7, int.class, "product", false, "PRODUCT");
        public final static Property TenderMoney = new Property(8, double.class, "tenderMoney", false, "TENDER_MONEY");
        public final static Property TenderTime = new Property(9, String.class, "tenderTime", false, "TENDER_TIME");
        public final static Property VoucherId = new Property(10, long.class, "voucherId", false, "VOUCHER_ID");
        public final static Property VoucherMoney = new Property(11, double.class, "voucherMoney", false, "VOUCHER_MONEY");
    };


    public InvestRecordDao(DaoConfig config) {
        super(config);
    }
    
    public InvestRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVEST_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAGE\" INTEGER NOT NULL ," + // 1: page
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 2: pageSize
                "\"TOTAL_PAGE\" INTEGER NOT NULL ," + // 3: totalPage
                "\"IID\" INTEGER NOT NULL ," + // 4: iid
                "\"LOAN_TYPE\" INTEGER NOT NULL ," + // 5: loanType
                "\"IS_SUCCEED\" INTEGER NOT NULL ," + // 6: isSucceed
                "\"PRODUCT\" INTEGER NOT NULL ," + // 7: product
                "\"TENDER_MONEY\" REAL NOT NULL ," + // 8: tenderMoney
                "\"TENDER_TIME\" TEXT," + // 9: tenderTime
                "\"VOUCHER_ID\" INTEGER NOT NULL ," + // 10: voucherId
                "\"VOUCHER_MONEY\" REAL NOT NULL );"); // 11: voucherMoney
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVEST_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, InvestRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPage());
        stmt.bindLong(3, entity.getPageSize());
        stmt.bindLong(4, entity.getTotalPage());
        stmt.bindLong(5, entity.getIid());
        stmt.bindLong(6, entity.getLoanType());
        stmt.bindLong(7, entity.getIsSucceed());
        stmt.bindLong(8, entity.getProduct());
        stmt.bindDouble(9, entity.getTenderMoney());
 
        String tenderTime = entity.getTenderTime();
        if (tenderTime != null) {
            stmt.bindString(10, tenderTime);
        }
        stmt.bindLong(11, entity.getVoucherId());
        stmt.bindDouble(12, entity.getVoucherMoney());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public InvestRecord readEntity(Cursor cursor, int offset) {
        InvestRecord entity = new InvestRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // page
            cursor.getLong(offset + 2), // pageSize
            cursor.getLong(offset + 3), // totalPage
            cursor.getLong(offset + 4), // iid
            cursor.getInt(offset + 5), // loanType
            cursor.getInt(offset + 6), // isSucceed
            cursor.getInt(offset + 7), // product
            cursor.getDouble(offset + 8), // tenderMoney
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tenderTime
            cursor.getLong(offset + 10), // voucherId
            cursor.getDouble(offset + 11) // voucherMoney
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, InvestRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPage(cursor.getLong(offset + 1));
        entity.setPageSize(cursor.getLong(offset + 2));
        entity.setTotalPage(cursor.getLong(offset + 3));
        entity.setIid(cursor.getLong(offset + 4));
        entity.setLoanType(cursor.getInt(offset + 5));
        entity.setIsSucceed(cursor.getInt(offset + 6));
        entity.setProduct(cursor.getInt(offset + 7));
        entity.setTenderMoney(cursor.getDouble(offset + 8));
        entity.setTenderTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVoucherId(cursor.getLong(offset + 10));
        entity.setVoucherMoney(cursor.getDouble(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(InvestRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(InvestRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
