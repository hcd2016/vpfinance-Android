package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.vpfinance.vpjr.greendao.BankCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANK_CARD".
*/
public class BankCardDao extends AbstractDao<BankCard, Long> {

    public static final String TABLENAME = "BANK_CARD";

    /**
     * Properties of entity BankCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Page = new Property(1, long.class, "page", false, "PAGE");
        public final static Property PageSize = new Property(2, long.class, "pageSize", false, "PAGE_SIZE");
        public final static Property TotalPage = new Property(3, long.class, "totalPage", false, "TOTAL_PAGE");
        public final static Property Bid = new Property(4, long.class, "bid", false, "BID");
        public final static Property AccountName = new Property(5, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property BankAccount = new Property(6, String.class, "bankAccount", false, "BANK_ACCOUNT");
        public final static Property Bankname = new Property(7, String.class, "bankname", false, "BANKNAME");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Branch = new Property(9, String.class, "branch", false, "BRANCH");
        public final static Property Province = new Property(10, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(11, String.class, "city", false, "CITY");
    };


    public BankCardDao(DaoConfig config) {
        super(config);
    }
    
    public BankCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANK_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAGE\" INTEGER NOT NULL ," + // 1: page
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 2: pageSize
                "\"TOTAL_PAGE\" INTEGER NOT NULL ," + // 3: totalPage
                "\"BID\" INTEGER NOT NULL ," + // 4: bid
                "\"ACCOUNT_NAME\" TEXT NOT NULL ," + // 5: accountName
                "\"BANK_ACCOUNT\" TEXT NOT NULL ," + // 6: bankAccount
                "\"BANKNAME\" TEXT NOT NULL ," + // 7: bankname
                "\"NAME\" TEXT NOT NULL ," + // 8: name
                "\"BRANCH\" TEXT NOT NULL ," + // 9: branch
                "\"PROVINCE\" TEXT NOT NULL ," + // 10: province
                "\"CITY\" TEXT NOT NULL );"); // 11: city
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANK_CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BankCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPage());
        stmt.bindLong(3, entity.getPageSize());
        stmt.bindLong(4, entity.getTotalPage());
        stmt.bindLong(5, entity.getBid());
        stmt.bindString(6, entity.getAccountName());
        stmt.bindString(7, entity.getBankAccount());
        stmt.bindString(8, entity.getBankname());
        stmt.bindString(9, entity.getName());
        stmt.bindString(10, entity.getBranch());
        stmt.bindString(11, entity.getProvince());
        stmt.bindString(12, entity.getCity());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BankCard readEntity(Cursor cursor, int offset) {
        BankCard entity = new BankCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // page
            cursor.getLong(offset + 2), // pageSize
            cursor.getLong(offset + 3), // totalPage
            cursor.getLong(offset + 4), // bid
            cursor.getString(offset + 5), // accountName
            cursor.getString(offset + 6), // bankAccount
            cursor.getString(offset + 7), // bankname
            cursor.getString(offset + 8), // name
            cursor.getString(offset + 9), // branch
            cursor.getString(offset + 10), // province
            cursor.getString(offset + 11) // city
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BankCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPage(cursor.getLong(offset + 1));
        entity.setPageSize(cursor.getLong(offset + 2));
        entity.setTotalPage(cursor.getLong(offset + 3));
        entity.setBid(cursor.getLong(offset + 4));
        entity.setAccountName(cursor.getString(offset + 5));
        entity.setBankAccount(cursor.getString(offset + 6));
        entity.setBankname(cursor.getString(offset + 7));
        entity.setName(cursor.getString(offset + 8));
        entity.setBranch(cursor.getString(offset + 9));
        entity.setProvince(cursor.getString(offset + 10));
        entity.setCity(cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BankCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BankCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
