package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.vpfinance.vpjr.greendao.BorrowerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BORROWER_INFO".
*/
public class BorrowerInfoDao extends AbstractDao<BorrowerInfo, Long> {

    public static final String TABLENAME = "BORROWER_INFO";

    /**
     * Properties of entity BorrowerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bid = new Property(1, long.class, "bid", false, "BID");
        public final static Property Pid = new Property(2, long.class, "pid", false, "PID");
        public final static Property IsCard = new Property(3, String.class, "isCard", false, "IS_CARD");
        public final static Property Age = new Property(4, long.class, "age", false, "AGE");
        public final static Property Money = new Property(5, double.class, "money", false, "MONEY");
        public final static Property RealName = new Property(6, String.class, "realName", false, "REAL_NAME");
        public final static Property Credit = new Property(7, double.class, "credit", false, "CREDIT");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
    };


    public BorrowerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BorrowerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BORROWER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BID\" INTEGER NOT NULL ," + // 1: bid
                "\"PID\" INTEGER NOT NULL ," + // 2: pid
                "\"IS_CARD\" TEXT," + // 3: isCard
                "\"AGE\" INTEGER NOT NULL ," + // 4: age
                "\"MONEY\" REAL NOT NULL ," + // 5: money
                "\"REAL_NAME\" TEXT," + // 6: realName
                "\"CREDIT\" REAL NOT NULL ," + // 7: credit
                "\"REMARK\" TEXT);"); // 8: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BORROWER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BorrowerInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBid());
        stmt.bindLong(3, entity.getPid());
 
        String isCard = entity.getIsCard();
        if (isCard != null) {
            stmt.bindString(4, isCard);
        }
        stmt.bindLong(5, entity.getAge());
        stmt.bindDouble(6, entity.getMoney());
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(7, realName);
        }
        stmt.bindDouble(8, entity.getCredit());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BorrowerInfo readEntity(Cursor cursor, int offset) {
        BorrowerInfo entity = new BorrowerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bid
            cursor.getLong(offset + 2), // pid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isCard
            cursor.getLong(offset + 4), // age
            cursor.getDouble(offset + 5), // money
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // realName
            cursor.getDouble(offset + 7), // credit
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // remark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BorrowerInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBid(cursor.getLong(offset + 1));
        entity.setPid(cursor.getLong(offset + 2));
        entity.setIsCard(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAge(cursor.getLong(offset + 4));
        entity.setMoney(cursor.getDouble(offset + 5));
        entity.setRealName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCredit(cursor.getDouble(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BorrowerInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BorrowerInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
