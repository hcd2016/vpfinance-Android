package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.vpfinance.vpjr.greendao.QueryPage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUERY_PAGE".
*/
public class QueryPageDao extends AbstractDao<QueryPage, Long> {

    public static final String TABLENAME = "QUERY_PAGE";

    /**
     * Properties of entity QueryPage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Page = new Property(1, long.class, "page", false, "PAGE");
        public final static Property PageSize = new Property(2, long.class, "pageSize", false, "PAGE_SIZE");
        public final static Property TotalPage = new Property(3, long.class, "totalPage", false, "TOTAL_PAGE");
        public final static Property Qid = new Property(4, String.class, "qid", false, "QID");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Money = new Property(7, double.class, "money", false, "MONEY");
        public final static Property MoneyDetail = new Property(8, String.class, "moneyDetail", false, "MONEY_DETAIL");
        public final static Property Progress = new Property(9, String.class, "progress", false, "PROGRESS");
        public final static Property Eid = new Property(10, String.class, "eid", false, "EID");
    };


    public QueryPageDao(DaoConfig config) {
        super(config);
    }
    
    public QueryPageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUERY_PAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PAGE\" INTEGER NOT NULL ," + // 1: page
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 2: pageSize
                "\"TOTAL_PAGE\" INTEGER NOT NULL ," + // 3: totalPage
                "\"QID\" TEXT NOT NULL ," + // 4: qid
                "\"TYPE\" TEXT NOT NULL ," + // 5: type
                "\"TIME\" TEXT NOT NULL ," + // 6: time
                "\"MONEY\" REAL NOT NULL ," + // 7: money
                "\"MONEY_DETAIL\" TEXT NOT NULL ," + // 8: moneyDetail
                "\"PROGRESS\" TEXT NOT NULL ," + // 9: progress
                "\"EID\" TEXT NOT NULL );"); // 10: eid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUERY_PAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, QueryPage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPage());
        stmt.bindLong(3, entity.getPageSize());
        stmt.bindLong(4, entity.getTotalPage());
        stmt.bindString(5, entity.getQid());
        stmt.bindString(6, entity.getType());
        stmt.bindString(7, entity.getTime());
        stmt.bindDouble(8, entity.getMoney());
        stmt.bindString(9, entity.getMoneyDetail());
        stmt.bindString(10, entity.getProgress());
        stmt.bindString(11, entity.getEid());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public QueryPage readEntity(Cursor cursor, int offset) {
        QueryPage entity = new QueryPage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // page
            cursor.getLong(offset + 2), // pageSize
            cursor.getLong(offset + 3), // totalPage
            cursor.getString(offset + 4), // qid
            cursor.getString(offset + 5), // type
            cursor.getString(offset + 6), // time
            cursor.getDouble(offset + 7), // money
            cursor.getString(offset + 8), // moneyDetail
            cursor.getString(offset + 9), // progress
            cursor.getString(offset + 10) // eid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, QueryPage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPage(cursor.getLong(offset + 1));
        entity.setPageSize(cursor.getLong(offset + 2));
        entity.setTotalPage(cursor.getLong(offset + 3));
        entity.setQid(cursor.getString(offset + 4));
        entity.setType(cursor.getString(offset + 5));
        entity.setTime(cursor.getString(offset + 6));
        entity.setMoney(cursor.getDouble(offset + 7));
        entity.setMoneyDetail(cursor.getString(offset + 8));
        entity.setProgress(cursor.getString(offset + 9));
        entity.setEid(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(QueryPage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(QueryPage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
