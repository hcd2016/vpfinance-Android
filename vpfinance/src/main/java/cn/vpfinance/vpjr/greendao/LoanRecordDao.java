package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.vpfinance.vpjr.greendao.LoanRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOAN_RECORD".
*/
public class LoanRecordDao extends AbstractDao<LoanRecord, Long> {

    public static final String TABLENAME = "LOAN_RECORD";

    /**
     * Properties of entity LoanRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lid = new Property(1, long.class, "lid", false, "LID");
        public final static Property Pid = new Property(2, long.class, "pid", false, "PID");
        public final static Property Page = new Property(3, long.class, "page", false, "PAGE");
        public final static Property PageSize = new Property(4, long.class, "pageSize", false, "PAGE_SIZE");
        public final static Property TotalPage = new Property(5, long.class, "totalPage", false, "TOTAL_PAGE");
        public final static Property Username = new Property(6, String.class, "username", false, "USERNAME");
        public final static Property Rate = new Property(7, double.class, "rate", false, "RATE");
        public final static Property TendMoney = new Property(8, double.class, "tendMoney", false, "TEND_MONEY");
        public final static Property PayStatus = new Property(9, String.class, "payStatus", false, "PAY_STATUS");
        public final static Property Paytime = new Property(10, String.class, "paytime", false, "PAYTIME");
        public final static Property IsBook = new Property(11, Integer.class, "isBook", false, "IS_BOOK");
        public final static Property VoucherMoney = new Property(12, String.class, "voucherMoney", false, "VOUCHER_MONEY");
        public final static Property Type = new Property(13, String.class, "type", false, "TYPE");
    };


    public LoanRecordDao(DaoConfig config) {
        super(config);
    }
    
    public LoanRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOAN_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LID\" INTEGER NOT NULL ," + // 1: lid
                "\"PID\" INTEGER NOT NULL ," + // 2: pid
                "\"PAGE\" INTEGER NOT NULL ," + // 3: page
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 4: pageSize
                "\"TOTAL_PAGE\" INTEGER NOT NULL ," + // 5: totalPage
                "\"USERNAME\" TEXT," + // 6: username
                "\"RATE\" REAL NOT NULL ," + // 7: rate
                "\"TEND_MONEY\" REAL NOT NULL ," + // 8: tendMoney
                "\"PAY_STATUS\" TEXT," + // 9: payStatus
                "\"PAYTIME\" TEXT," + // 10: paytime
                "\"IS_BOOK\" INTEGER," + // 11: isBook
                "\"VOUCHER_MONEY\" TEXT," + // 12: voucherMoney
                "\"TYPE\" TEXT);"); // 13: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOAN_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoanRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLid());
        stmt.bindLong(3, entity.getPid());
        stmt.bindLong(4, entity.getPage());
        stmt.bindLong(5, entity.getPageSize());
        stmt.bindLong(6, entity.getTotalPage());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
        stmt.bindDouble(8, entity.getRate());
        stmt.bindDouble(9, entity.getTendMoney());
 
        String payStatus = entity.getPayStatus();
        if (payStatus != null) {
            stmt.bindString(10, payStatus);
        }
 
        String paytime = entity.getPaytime();
        if (paytime != null) {
            stmt.bindString(11, paytime);
        }
 
        Integer isBook = entity.getIsBook();
        if (isBook != null) {
            stmt.bindLong(12, isBook);
        }
 
        String voucherMoney = entity.getVoucherMoney();
        if (voucherMoney != null) {
            stmt.bindString(13, voucherMoney);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(14, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoanRecord readEntity(Cursor cursor, int offset) {
        LoanRecord entity = new LoanRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // lid
            cursor.getLong(offset + 2), // pid
            cursor.getLong(offset + 3), // page
            cursor.getLong(offset + 4), // pageSize
            cursor.getLong(offset + 5), // totalPage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // username
            cursor.getDouble(offset + 7), // rate
            cursor.getDouble(offset + 8), // tendMoney
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // payStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // paytime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // isBook
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // voucherMoney
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoanRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLid(cursor.getLong(offset + 1));
        entity.setPid(cursor.getLong(offset + 2));
        entity.setPage(cursor.getLong(offset + 3));
        entity.setPageSize(cursor.getLong(offset + 4));
        entity.setTotalPage(cursor.getLong(offset + 5));
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRate(cursor.getDouble(offset + 7));
        entity.setTendMoney(cursor.getDouble(offset + 8));
        entity.setPayStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaytime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsBook(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setVoucherMoney(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LoanRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LoanRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
