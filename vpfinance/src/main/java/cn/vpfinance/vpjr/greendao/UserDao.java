package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.vpfinance.vpjr.greendao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property RealName = new Property(3, String.class, "realName", false, "REAL_NAME");
        public final static Property SessionId = new Property(4, String.class, "sessionId", false, "SESSION_ID");
        public final static Property CellPhone = new Property(5, String.class, "cellPhone", false, "CELL_PHONE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property EmailPass = new Property(7, String.class, "emailPass", false, "EMAIL_PASS");
        public final static Property Userpass = new Property(8, String.class, "userpass", false, "USERPASS");
        public final static Property Head = new Property(9, String.class, "head", false, "HEAD");
        public final static Property IdentityCard = new Property(10, String.class, "identityCard", false, "IDENTITY_CARD");
        public final static Property CashBalance = new Property(11, Double.class, "cashBalance", false, "CASH_BALANCE");
        public final static Property NetAsset = new Property(12, Double.class, "netAsset", false, "NET_ASSET");
        public final static Property FrozenAmtN = new Property(13, Double.class, "frozenAmtN", false, "FROZEN_AMT_N");
        public final static Property Paying = new Property(14, Double.class, "paying", false, "PAYING");
        public final static Property DBid = new Property(15, Double.class, "dBid", false, "D_BID");
        public final static Property DSum = new Property(16, Double.class, "dSum", false, "D_SUM");
        public final static Property Invest = new Property(17, Double.class, "invest", false, "INVEST");
        public final static Property PreIncome = new Property(18, Double.class, "preIncome", false, "PRE_INCOME");
        public final static Property HasTradePassword = new Property(19, Boolean.class, "hasTradePassword", false, "HAS_TRADE_PASSWORD");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_NAME\" TEXT NOT NULL ," + // 2: userName
                "\"REAL_NAME\" TEXT," + // 3: realName
                "\"SESSION_ID\" TEXT," + // 4: sessionId
                "\"CELL_PHONE\" TEXT," + // 5: cellPhone
                "\"EMAIL\" TEXT," + // 6: email
                "\"EMAIL_PASS\" TEXT," + // 7: emailPass
                "\"USERPASS\" TEXT," + // 8: userpass
                "\"HEAD\" TEXT," + // 9: head
                "\"IDENTITY_CARD\" TEXT," + // 10: identityCard
                "\"CASH_BALANCE\" REAL," + // 11: cashBalance
                "\"NET_ASSET\" REAL," + // 12: netAsset
                "\"FROZEN_AMT_N\" REAL," + // 13: frozenAmtN
                "\"PAYING\" REAL," + // 14: paying
                "\"D_BID\" REAL," + // 15: dBid
                "\"D_SUM\" REAL," + // 16: dSum
                "\"INVEST\" REAL," + // 17: invest
                "\"PRE_INCOME\" REAL," + // 18: preIncome
                "\"HAS_TRADE_PASSWORD\" INTEGER);"); // 19: hasTradePassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindString(3, entity.getUserName());
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(5, sessionId);
        }
 
        String cellPhone = entity.getCellPhone();
        if (cellPhone != null) {
            stmt.bindString(6, cellPhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String emailPass = entity.getEmailPass();
        if (emailPass != null) {
            stmt.bindString(8, emailPass);
        }
 
        String userpass = entity.getUserpass();
        if (userpass != null) {
            stmt.bindString(9, userpass);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(10, head);
        }
 
        String identityCard = entity.getIdentityCard();
        if (identityCard != null) {
            stmt.bindString(11, identityCard);
        }
 
        Double cashBalance = entity.getCashBalance();
        if (cashBalance != null) {
            stmt.bindDouble(12, cashBalance);
        }
 
        Double netAsset = entity.getNetAsset();
        if (netAsset != null) {
            stmt.bindDouble(13, netAsset);
        }
 
        Double frozenAmtN = entity.getFrozenAmtN();
        if (frozenAmtN != null) {
            stmt.bindDouble(14, frozenAmtN);
        }
 
        Double paying = entity.getPaying();
        if (paying != null) {
            stmt.bindDouble(15, paying);
        }
 
        Double dBid = entity.getDBid();
        if (dBid != null) {
            stmt.bindDouble(16, dBid);
        }
 
        Double dSum = entity.getDSum();
        if (dSum != null) {
            stmt.bindDouble(17, dSum);
        }
 
        Double invest = entity.getInvest();
        if (invest != null) {
            stmt.bindDouble(18, invest);
        }
 
        Double preIncome = entity.getPreIncome();
        if (preIncome != null) {
            stmt.bindDouble(19, preIncome);
        }
 
        Boolean hasTradePassword = entity.getHasTradePassword();
        if (hasTradePassword != null) {
            stmt.bindLong(20, hasTradePassword ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sessionId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cellPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // emailPass
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userpass
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // head
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // identityCard
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // cashBalance
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // netAsset
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // frozenAmtN
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // paying
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // dBid
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // dSum
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // invest
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // preIncome
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0 // hasTradePassword
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserName(cursor.getString(offset + 2));
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSessionId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCellPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmailPass(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserpass(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHead(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdentityCard(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCashBalance(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setNetAsset(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setFrozenAmtN(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setPaying(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setDBid(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setDSum(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setInvest(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setPreIncome(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setHasTradePassword(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
