package cn.vpfinance.vpjr.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cn.vpfinance.vpjr.gson.FinanceProduct;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINANCE_PRODUCT".
*/
public class FinanceProductDao extends AbstractDao<FinanceProduct, Long> {

    public static final String TABLENAME = "FINANCE_PRODUCT";

    /**
     * Properties of entity FinanceProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BuyCount = new Property(1, String.class, "buyCount", false, "BUY_COUNT");
        public final static Property BidEndTime = new Property(2, Long.class, "bidEndTime", false, "BID_END_TIME");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Total_tend_money = new Property(4, double.class, "total_tend_money", false, "TOTAL_TEND_MONEY");
        public final static Property Pid = new Property(5, long.class, "pid", false, "PID");
        public final static Property TotalPage = new Property(6, long.class, "totalPage", false, "TOTAL_PAGE");
        public final static Property Assure = new Property(7, String.class, "assure", false, "ASSURE");
        public final static Property Borrower = new Property(8, String.class, "borrower", false, "BORROWER");
        public final static Property RiskGrade = new Property(9, String.class, "riskGrade", false, "RISK_GRADE");
        public final static Property Behoof = new Property(10, String.class, "behoof", false, "BEHOOF");
        public final static Property BidTime = new Property(11, String.class, "bidTime", false, "BID_TIME");
        public final static Property CreditTime = new Property(12, String.class, "creditTime", false, "CREDIT_TIME");
        public final static Property GuaranteesAmt = new Property(13, double.class, "guaranteesAmt", false, "GUARANTEES_AMT");
        public final static Property LoanCategory = new Property(14, long.class, "loanCategory", false, "LOAN_CATEGORY");
        public final static Property LoanExplain = new Property(15, String.class, "loanExplain", false, "LOAN_EXPLAIN");
        public final static Property LoanNumber = new Property(16, String.class, "loanNumber", false, "LOAN_NUMBER");
        public final static Property LoanOrigin = new Property(17, String.class, "loanOrigin", false, "LOAN_ORIGIN");
        public final static Property LoanSignTime = new Property(18, String.class, "loanSignTime", false, "LOAN_SIGN_TIME");
        public final static Property LoanTitle = new Property(19, String.class, "loanTitle", false, "LOAN_TITLE");
        public final static Property MgtMoney = new Property(20, double.class, "mgtMoney", false, "MGT_MONEY");
        public final static Property MgtMoneyScale = new Property(21, double.class, "mgtMoneyScale", false, "MGT_MONEY_SCALE");
        public final static Property Overview = new Property(22, String.class, "overview", false, "OVERVIEW");
        public final static Property RiskAssess = new Property(23, long.class, "riskAssess", false, "RISK_ASSESS");
        public final static Property RiskCtrlWay = new Property(24, String.class, "riskCtrlWay", false, "RISK_CTRL_WAY");
        public final static Property Rate = new Property(25, double.class, "rate", false, "RATE");
        public final static Property Reward = new Property(26, String.class, "reward", false, "REWARD");
        public final static Property IssueLoan = new Property(27, double.class, "issueLoan", false, "ISSUE_LOAN");
        public final static Property LoanType = new Property(28, long.class, "loanType", false, "LOAN_TYPE");
        public final static Property Loanstate = new Property(29, long.class, "loanstate", false, "LOANSTATE");
        public final static Property RefundWay = new Property(30, long.class, "refundWay", false, "REFUND_WAY");
        public final static Property LoanUnit = new Property(31, double.class, "loanUnit", false, "LOAN_UNIT");
        public final static Property Month = new Property(32, long.class, "month", false, "MONTH");
        public final static Property PublishTime = new Property(33, String.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property SubType = new Property(34, long.class, "subType", false, "SUB_TYPE");
        public final static Property Product = new Property(35, long.class, "product", false, "PRODUCT");
        public final static Property ProductType = new Property(36, String.class, "productType", false, "PRODUCT_TYPE");
        public final static Property AllowTransfer = new Property(37, String.class, "allowTransfer", false, "ALLOW_TRANSFER");
        public final static Property ImageUrl = new Property(38, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property MaxRate = new Property(39, String.class, "maxRate", false, "MAX_RATE");
        public final static Property MinRate = new Property(40, String.class, "minRate", false, "MIN_RATE");
        public final static Property PromitRate = new Property(41, Double.class, "promitRate", false, "PROMIT_RATE");
        public final static Property Status = new Property(42, long.class, "status", false, "STATUS");
        public final static Property IsAllowTrip = new Property(43, Integer.class, "isAllowTrip", false, "IS_ALLOW_TRIP");
        public final static Property Borrowing = new Property(44, String.class, "borrowing", false, "BORROWING");
        public final static Property Safeway = new Property(45, String.class, "safeway", false, "SAFEWAY");
        public final static Property BookCouponNumber = new Property(46, String.class, "bookCouponNumber", false, "BOOK_COUPON_NUMBER");
        public final static Property BookPercent = new Property(47, Double.class, "bookPercent", false, "BOOK_PERCENT");
        public final static Property Amount = new Property(48, double.class, "amount", false, "AMOUNT");
        public final static Property OpenAmount = new Property(49, double.class, "openAmount", false, "OPEN_AMOUNT");
        public final static Property YearInterest = new Property(50, double.class, "yearInterest", false, "YEAR_INTEREST");
        public final static Property PoolNum = new Property(51, int.class, "poolNum", false, "POOL_NUM");
        public final static Property SoldOut = new Property(52, int.class, "soldOut", false, "SOLD_OUT");
        public final static Property Scale = new Property(53, double.class, "scale", false, "SCALE");
        public final static Property MaxMoney = new Property(54, double.class, "maxMoney", false, "MAX_MONEY");
        public final static Property Repaytime = new Property(55, String.class, "repaytime", false, "REPAYTIME");
        public final static Property Periods = new Property(56, Integer.class, "periods", false, "PERIODS");
        public final static Property RepayStatus = new Property(57, String.class, "repayStatus", false, "REPAY_STATUS");
        public final static Property TotalPeriod = new Property(58, Integer.class, "totalPeriod", false, "TOTAL_PERIOD");
        public final static Property OriginLoanId = new Property(59, Integer.class, "originLoanId", false, "ORIGIN_LOAN_ID");
        public final static Property NoRepayList = new Property(60, String.class, "noRepayList", false, "NO_REPAY_LIST");
        public final static Property DebtUser = new Property(61, String.class, "debtUser", false, "DEBT_USER");
        public final static Property OriginIssueLoan = new Property(62, Double.class, "originIssueLoan", false, "ORIGIN_ISSUE_LOAN");
        public final static Property Appreciation = new Property(63, double.class, "appreciation", false, "APPRECIATION");
        public final static Property DiscountMoney = new Property(64, double.class, "discountMoney", false, "DISCOUNT_MONEY");
        public final static Property Distype = new Property(65, int.class, "distype", false, "DISTYPE");
        public final static Property Share = new Property(66, int.class, "share", false, "SHARE");
        public final static Property TenderMoney = new Property(67, double.class, "tenderMoney", false, "TENDER_MONEY");
        public final static Property UserAuth = new Property(68, long.class, "userAuth", false, "USER_AUTH");
        public final static Property UserDebt = new Property(69, long.class, "userDebt", false, "USER_DEBT");
        public final static Property BorrowerId = new Property(70, long.class, "borrowerId", false, "BORROWER_ID");
        public final static Property IsCard = new Property(71, String.class, "isCard", false, "IS_CARD");
        public final static Property Age = new Property(72, long.class, "age", false, "AGE");
        public final static Property Money = new Property(73, double.class, "money", false, "MONEY");
        public final static Property RealName = new Property(74, String.class, "realName", false, "REAL_NAME");
        public final static Property Credit = new Property(75, double.class, "credit", false, "CREDIT");
        public final static Property Remark = new Property(76, String.class, "remark", false, "REMARK");
        public final static Property UpdateTime = new Property(77, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property LastTenderTime = new Property(78, String.class, "lastTenderTime", false, "LAST_TENDER_TIME");
        public final static Property CreditTime2 = new Property(79, String.class, "creditTime2", false, "CREDIT_TIME2");
        public final static Property Repays = new Property(80, String.class, "repays", false, "REPAYS");
        public final static Property ImageUrlByIphone = new Property(81, String.class, "imageUrlByIphone", false, "IMAGE_URL_BY_IPHONE");
        public final static Property GivePhone = new Property(82, String.class, "givePhone", false, "GIVE_PHONE");
    };


    public FinanceProductDao(DaoConfig config) {
        super(config);
    }
    
    public FinanceProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINANCE_PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BUY_COUNT\" TEXT," + // 1: buyCount
                "\"BID_END_TIME\" INTEGER," + // 2: bidEndTime
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"TOTAL_TEND_MONEY\" REAL NOT NULL ," + // 4: total_tend_money
                "\"PID\" INTEGER NOT NULL ," + // 5: pid
                "\"TOTAL_PAGE\" INTEGER NOT NULL ," + // 6: totalPage
                "\"ASSURE\" TEXT," + // 7: assure
                "\"BORROWER\" TEXT," + // 8: borrower
                "\"RISK_GRADE\" TEXT," + // 9: riskGrade
                "\"BEHOOF\" TEXT," + // 10: behoof
                "\"BID_TIME\" TEXT," + // 11: bidTime
                "\"CREDIT_TIME\" TEXT," + // 12: creditTime
                "\"GUARANTEES_AMT\" REAL NOT NULL ," + // 13: guaranteesAmt
                "\"LOAN_CATEGORY\" INTEGER NOT NULL ," + // 14: loanCategory
                "\"LOAN_EXPLAIN\" TEXT," + // 15: loanExplain
                "\"LOAN_NUMBER\" TEXT," + // 16: loanNumber
                "\"LOAN_ORIGIN\" TEXT," + // 17: loanOrigin
                "\"LOAN_SIGN_TIME\" TEXT," + // 18: loanSignTime
                "\"LOAN_TITLE\" TEXT," + // 19: loanTitle
                "\"MGT_MONEY\" REAL NOT NULL ," + // 20: mgtMoney
                "\"MGT_MONEY_SCALE\" REAL NOT NULL ," + // 21: mgtMoneyScale
                "\"OVERVIEW\" TEXT," + // 22: overview
                "\"RISK_ASSESS\" INTEGER NOT NULL ," + // 23: riskAssess
                "\"RISK_CTRL_WAY\" TEXT," + // 24: riskCtrlWay
                "\"RATE\" REAL NOT NULL ," + // 25: rate
                "\"REWARD\" TEXT," + // 26: reward
                "\"ISSUE_LOAN\" REAL NOT NULL ," + // 27: issueLoan
                "\"LOAN_TYPE\" INTEGER NOT NULL ," + // 28: loanType
                "\"LOANSTATE\" INTEGER NOT NULL ," + // 29: loanstate
                "\"REFUND_WAY\" INTEGER NOT NULL ," + // 30: refundWay
                "\"LOAN_UNIT\" REAL NOT NULL ," + // 31: loanUnit
                "\"MONTH\" INTEGER NOT NULL ," + // 32: month
                "\"PUBLISH_TIME\" TEXT," + // 33: publishTime
                "\"SUB_TYPE\" INTEGER NOT NULL ," + // 34: subType
                "\"PRODUCT\" INTEGER NOT NULL ," + // 35: product
                "\"PRODUCT_TYPE\" TEXT," + // 36: productType
                "\"ALLOW_TRANSFER\" TEXT," + // 37: allowTransfer
                "\"IMAGE_URL\" TEXT," + // 38: imageUrl
                "\"MAX_RATE\" TEXT," + // 39: maxRate
                "\"MIN_RATE\" TEXT," + // 40: minRate
                "\"PROMIT_RATE\" REAL," + // 41: promitRate
                "\"STATUS\" INTEGER NOT NULL ," + // 42: status
                "\"IS_ALLOW_TRIP\" INTEGER," + // 43: isAllowTrip
                "\"BORROWING\" TEXT," + // 44: borrowing
                "\"SAFEWAY\" TEXT," + // 45: safeway
                "\"BOOK_COUPON_NUMBER\" TEXT," + // 46: bookCouponNumber
                "\"BOOK_PERCENT\" REAL," + // 47: bookPercent
                "\"AMOUNT\" REAL NOT NULL ," + // 48: amount
                "\"OPEN_AMOUNT\" REAL NOT NULL ," + // 49: openAmount
                "\"YEAR_INTEREST\" REAL NOT NULL ," + // 50: yearInterest
                "\"POOL_NUM\" INTEGER NOT NULL ," + // 51: poolNum
                "\"SOLD_OUT\" INTEGER NOT NULL ," + // 52: soldOut
                "\"SCALE\" REAL NOT NULL ," + // 53: scale
                "\"MAX_MONEY\" REAL NOT NULL ," + // 54: maxMoney
                "\"REPAYTIME\" TEXT," + // 55: repaytime
                "\"PERIODS\" INTEGER," + // 56: periods
                "\"REPAY_STATUS\" TEXT," + // 57: repayStatus
                "\"TOTAL_PERIOD\" INTEGER," + // 58: totalPeriod
                "\"ORIGIN_LOAN_ID\" INTEGER," + // 59: originLoanId
                "\"NO_REPAY_LIST\" TEXT," + // 60: noRepayList
                "\"DEBT_USER\" TEXT," + // 61: debtUser
                "\"ORIGIN_ISSUE_LOAN\" REAL," + // 62: originIssueLoan
                "\"APPRECIATION\" REAL NOT NULL ," + // 63: appreciation
                "\"DISCOUNT_MONEY\" REAL NOT NULL ," + // 64: discountMoney
                "\"DISTYPE\" INTEGER NOT NULL ," + // 65: distype
                "\"SHARE\" INTEGER NOT NULL ," + // 66: share
                "\"TENDER_MONEY\" REAL NOT NULL ," + // 67: tenderMoney
                "\"USER_AUTH\" INTEGER NOT NULL ," + // 68: userAuth
                "\"USER_DEBT\" INTEGER NOT NULL ," + // 69: userDebt
                "\"BORROWER_ID\" INTEGER NOT NULL ," + // 70: borrowerId
                "\"IS_CARD\" TEXT," + // 71: isCard
                "\"AGE\" INTEGER NOT NULL ," + // 72: age
                "\"MONEY\" REAL NOT NULL ," + // 73: money
                "\"REAL_NAME\" TEXT," + // 74: realName
                "\"CREDIT\" REAL NOT NULL ," + // 75: credit
                "\"REMARK\" TEXT," + // 76: remark
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 77: updateTime
                "\"LAST_TENDER_TIME\" TEXT," + // 78: lastTenderTime
                "\"CREDIT_TIME2\" TEXT," + // 79: creditTime2
                "\"REPAYS\" TEXT," + // 80: repays
                "\"IMAGE_URL_BY_IPHONE\" TEXT," + // 81: imageUrlByIphone
                "\"GIVE_PHONE\" TEXT);"); // 82: givePhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINANCE_PRODUCT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FinanceProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String buyCount = entity.getBuyCount();
        if (buyCount != null) {
            stmt.bindString(2, buyCount);
        }
 
        Long bidEndTime = entity.getBidEndTime();
        if (bidEndTime != null) {
            stmt.bindLong(3, bidEndTime);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindDouble(5, entity.getTotal_tend_money());
        stmt.bindLong(6, entity.getPid());
        stmt.bindLong(7, entity.getTotalPage());
 
        String assure = entity.getAssure();
        if (assure != null) {
            stmt.bindString(8, assure);
        }
 
        String borrower = entity.getBorrower();
        if (borrower != null) {
            stmt.bindString(9, borrower);
        }
 
        String riskGrade = entity.getRiskGrade();
        if (riskGrade != null) {
            stmt.bindString(10, riskGrade);
        }
 
        String behoof = entity.getBehoof();
        if (behoof != null) {
            stmt.bindString(11, behoof);
        }
 
        String bidTime = entity.getBidTime();
        if (bidTime != null) {
            stmt.bindString(12, bidTime);
        }
 
        String creditTime = entity.getCreditTime();
        if (creditTime != null) {
            stmt.bindString(13, creditTime);
        }
        stmt.bindDouble(14, entity.getGuaranteesAmt());
        stmt.bindLong(15, entity.getLoanCategory());
 
        String loanExplain = entity.getLoanExplain();
        if (loanExplain != null) {
            stmt.bindString(16, loanExplain);
        }
 
        String loanNumber = entity.getLoanNumber();
        if (loanNumber != null) {
            stmt.bindString(17, loanNumber);
        }
 
        String loanOrigin = entity.getLoanOrigin();
        if (loanOrigin != null) {
            stmt.bindString(18, loanOrigin);
        }
 
        String loanSignTime = entity.getLoanSignTime();
        if (loanSignTime != null) {
            stmt.bindString(19, loanSignTime);
        }
 
        String loanTitle = entity.getLoanTitle();
        if (loanTitle != null) {
            stmt.bindString(20, loanTitle);
        }
        stmt.bindDouble(21, entity.getMgtMoney());
        stmt.bindDouble(22, entity.getMgtMoneyScale());
 
        String overview = entity.getOverview();
        if (overview != null) {
            stmt.bindString(23, overview);
        }
        stmt.bindLong(24, entity.getRiskAssess());
 
        String riskCtrlWay = entity.getRiskCtrlWay();
        if (riskCtrlWay != null) {
            stmt.bindString(25, riskCtrlWay);
        }
        stmt.bindDouble(26, entity.getRate());
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(27, reward);
        }
        stmt.bindDouble(28, entity.getIssueLoan());
        stmt.bindLong(29, entity.getLoanType());
        stmt.bindLong(30, entity.getLoanstate());
        stmt.bindLong(31, entity.getRefundWay());
        stmt.bindDouble(32, entity.getLoanUnit());
        stmt.bindLong(33, entity.getMonth());
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(34, publishTime);
        }
        stmt.bindLong(35, entity.getSubType());
        stmt.bindLong(36, entity.getProduct());
 
        String productType = entity.getProductType();
        if (productType != null) {
            stmt.bindString(37, productType);
        }
 
        String allowTransfer = entity.getAllowTransfer();
        if (allowTransfer != null) {
            stmt.bindString(38, allowTransfer);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(39, imageUrl);
        }
 
        String maxRate = entity.getMaxRate();
        if (maxRate != null) {
            stmt.bindString(40, maxRate);
        }
 
        String minRate = entity.getMinRate();
        if (minRate != null) {
            stmt.bindString(41, minRate);
        }
 
        Double promitRate = entity.getPromitRate();
        if (promitRate != null) {
            stmt.bindDouble(42, promitRate);
        }
        stmt.bindLong(43, entity.getStatus());
 
        Integer isAllowTrip = entity.getIsAllowTrip();
        if (isAllowTrip != null) {
            stmt.bindLong(44, isAllowTrip);
        }
 
        String borrowing = entity.getBorrowing();
        if (borrowing != null) {
            stmt.bindString(45, borrowing);
        }
 
        String safeway = entity.getSafeway();
        if (safeway != null) {
            stmt.bindString(46, safeway);
        }
 
        String bookCouponNumber = entity.getBookCouponNumber();
        if (bookCouponNumber != null) {
            stmt.bindString(47, bookCouponNumber);
        }
 
        Double bookPercent = entity.getBookPercent();
        if (bookPercent != null) {
            stmt.bindDouble(48, bookPercent);
        }
        stmt.bindDouble(49, entity.getAmount());
        stmt.bindDouble(50, entity.getOpenAmount());
        stmt.bindDouble(51, entity.getYearInterest());
        stmt.bindLong(52, entity.getPoolNum());
        stmt.bindLong(53, entity.getSoldOut());
        stmt.bindDouble(54, entity.getScale());
        stmt.bindDouble(55, entity.getMaxMoney());
 
        String repaytime = entity.getRepaytime();
        if (repaytime != null) {
            stmt.bindString(56, repaytime);
        }
 
        Integer periods = entity.getPeriods();
        if (periods != null) {
            stmt.bindLong(57, periods);
        }
 
        String repayStatus = entity.getRepayStatus();
        if (repayStatus != null) {
            stmt.bindString(58, repayStatus);
        }
 
        Integer totalPeriod = entity.getTotalPeriod();
        if (totalPeriod != null) {
            stmt.bindLong(59, totalPeriod);
        }
 
        Integer originLoanId = entity.getOriginLoanId();
        if (originLoanId != null) {
            stmt.bindLong(60, originLoanId);
        }
 
        String noRepayList = entity.getNoRepayList();
        if (noRepayList != null) {
            stmt.bindString(61, noRepayList);
        }
 
        String debtUser = entity.getDebtUser();
        if (debtUser != null) {
            stmt.bindString(62, debtUser);
        }
 
        Double originIssueLoan = entity.getOriginIssueLoan();
        if (originIssueLoan != null) {
            stmt.bindDouble(63, originIssueLoan);
        }
        stmt.bindDouble(64, entity.getAppreciation());
        stmt.bindDouble(65, entity.getDiscountMoney());
        stmt.bindLong(66, entity.getDistype());
        stmt.bindLong(67, entity.getShare());
        stmt.bindDouble(68, entity.getTenderMoney());
        stmt.bindLong(69, entity.getUserAuth());
        stmt.bindLong(70, entity.getUserDebt());
        stmt.bindLong(71, entity.getBorrowerId());
 
        String isCard = entity.getIsCard();
        if (isCard != null) {
            stmt.bindString(72, isCard);
        }
        stmt.bindLong(73, entity.getAge());
        stmt.bindDouble(74, entity.getMoney());
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(75, realName);
        }
        stmt.bindDouble(76, entity.getCredit());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(77, remark);
        }
        stmt.bindLong(78, entity.getUpdateTime());
 
        String lastTenderTime = entity.getLastTenderTime();
        if (lastTenderTime != null) {
            stmt.bindString(79, lastTenderTime);
        }
 
        String creditTime2 = entity.getCreditTime2();
        if (creditTime2 != null) {
            stmt.bindString(80, creditTime2);
        }
 
        String repays = entity.getRepays();
        if (repays != null) {
            stmt.bindString(81, repays);
        }
 
        String imageUrlByIphone = entity.getImageUrlByIphone();
        if (imageUrlByIphone != null) {
            stmt.bindString(82, imageUrlByIphone);
        }
 
        String givePhone = entity.getGivePhone();
        if (givePhone != null) {
            stmt.bindString(83, givePhone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FinanceProduct readEntity(Cursor cursor, int offset) {
        FinanceProduct entity = new FinanceProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // buyCount
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // bidEndTime
            cursor.getInt(offset + 3), // type
            cursor.getDouble(offset + 4), // total_tend_money
            cursor.getLong(offset + 5), // pid
            cursor.getLong(offset + 6), // totalPage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // assure
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // borrower
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // riskGrade
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // behoof
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bidTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // creditTime
            cursor.getDouble(offset + 13), // guaranteesAmt
            cursor.getLong(offset + 14), // loanCategory
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // loanExplain
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // loanNumber
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // loanOrigin
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // loanSignTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // loanTitle
            cursor.getDouble(offset + 20), // mgtMoney
            cursor.getDouble(offset + 21), // mgtMoneyScale
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // overview
            cursor.getLong(offset + 23), // riskAssess
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // riskCtrlWay
            cursor.getDouble(offset + 25), // rate
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // reward
            cursor.getDouble(offset + 27), // issueLoan
            cursor.getLong(offset + 28), // loanType
            cursor.getLong(offset + 29), // loanstate
            cursor.getLong(offset + 30), // refundWay
            cursor.getDouble(offset + 31), // loanUnit
            cursor.getLong(offset + 32), // month
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // publishTime
            cursor.getLong(offset + 34), // subType
            cursor.getLong(offset + 35), // product
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // productType
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // allowTransfer
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // imageUrl
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // maxRate
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // minRate
            cursor.isNull(offset + 41) ? null : cursor.getDouble(offset + 41), // promitRate
            cursor.getLong(offset + 42), // status
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // isAllowTrip
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // borrowing
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // safeway
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // bookCouponNumber
            cursor.isNull(offset + 47) ? null : cursor.getDouble(offset + 47), // bookPercent
            cursor.getDouble(offset + 48), // amount
            cursor.getDouble(offset + 49), // openAmount
            cursor.getDouble(offset + 50), // yearInterest
            cursor.getInt(offset + 51), // poolNum
            cursor.getInt(offset + 52), // soldOut
            cursor.getDouble(offset + 53), // scale
            cursor.getDouble(offset + 54), // maxMoney
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // repaytime
            cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56), // periods
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // repayStatus
            cursor.isNull(offset + 58) ? null : cursor.getInt(offset + 58), // totalPeriod
            cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // originLoanId
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // noRepayList
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // debtUser
            cursor.isNull(offset + 62) ? null : cursor.getDouble(offset + 62), // originIssueLoan
            cursor.getDouble(offset + 63), // appreciation
            cursor.getDouble(offset + 64), // discountMoney
            cursor.getInt(offset + 65), // distype
            cursor.getInt(offset + 66), // share
            cursor.getDouble(offset + 67), // tenderMoney
            cursor.getLong(offset + 68), // userAuth
            cursor.getLong(offset + 69), // userDebt
            cursor.getLong(offset + 70), // borrowerId
            cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71), // isCard
            cursor.getLong(offset + 72), // age
            cursor.getDouble(offset + 73), // money
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // realName
            cursor.getDouble(offset + 75), // credit
            cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76), // remark
            cursor.getLong(offset + 77), // updateTime
            cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78), // lastTenderTime
            cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79), // creditTime2
            cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80), // repays
            cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81), // imageUrlByIphone
            cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82) // givePhone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FinanceProduct entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBuyCount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBidEndTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setTotal_tend_money(cursor.getDouble(offset + 4));
        entity.setPid(cursor.getLong(offset + 5));
        entity.setTotalPage(cursor.getLong(offset + 6));
        entity.setAssure(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBorrower(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRiskGrade(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBehoof(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBidTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreditTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGuaranteesAmt(cursor.getDouble(offset + 13));
        entity.setLoanCategory(cursor.getLong(offset + 14));
        entity.setLoanExplain(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLoanNumber(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLoanOrigin(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLoanSignTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLoanTitle(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMgtMoney(cursor.getDouble(offset + 20));
        entity.setMgtMoneyScale(cursor.getDouble(offset + 21));
        entity.setOverview(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRiskAssess(cursor.getLong(offset + 23));
        entity.setRiskCtrlWay(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRate(cursor.getDouble(offset + 25));
        entity.setReward(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIssueLoan(cursor.getDouble(offset + 27));
        entity.setLoanType(cursor.getLong(offset + 28));
        entity.setLoanstate(cursor.getLong(offset + 29));
        entity.setRefundWay(cursor.getLong(offset + 30));
        entity.setLoanUnit(cursor.getDouble(offset + 31));
        entity.setMonth(cursor.getLong(offset + 32));
        entity.setPublishTime(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSubType(cursor.getLong(offset + 34));
        entity.setProduct(cursor.getLong(offset + 35));
        entity.setProductType(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setAllowTransfer(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setImageUrl(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setMaxRate(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setMinRate(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setPromitRate(cursor.isNull(offset + 41) ? null : cursor.getDouble(offset + 41));
        entity.setStatus(cursor.getLong(offset + 42));
        entity.setIsAllowTrip(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setBorrowing(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setSafeway(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setBookCouponNumber(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setBookPercent(cursor.isNull(offset + 47) ? null : cursor.getDouble(offset + 47));
        entity.setAmount(cursor.getDouble(offset + 48));
        entity.setOpenAmount(cursor.getDouble(offset + 49));
        entity.setYearInterest(cursor.getDouble(offset + 50));
        entity.setPoolNum(cursor.getInt(offset + 51));
        entity.setSoldOut(cursor.getInt(offset + 52));
        entity.setScale(cursor.getDouble(offset + 53));
        entity.setMaxMoney(cursor.getDouble(offset + 54));
        entity.setRepaytime(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setPeriods(cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56));
        entity.setRepayStatus(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setTotalPeriod(cursor.isNull(offset + 58) ? null : cursor.getInt(offset + 58));
        entity.setOriginLoanId(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setNoRepayList(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setDebtUser(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setOriginIssueLoan(cursor.isNull(offset + 62) ? null : cursor.getDouble(offset + 62));
        entity.setAppreciation(cursor.getDouble(offset + 63));
        entity.setDiscountMoney(cursor.getDouble(offset + 64));
        entity.setDistype(cursor.getInt(offset + 65));
        entity.setShare(cursor.getInt(offset + 66));
        entity.setTenderMoney(cursor.getDouble(offset + 67));
        entity.setUserAuth(cursor.getLong(offset + 68));
        entity.setUserDebt(cursor.getLong(offset + 69));
        entity.setBorrowerId(cursor.getLong(offset + 70));
        entity.setIsCard(cursor.isNull(offset + 71) ? null : cursor.getString(offset + 71));
        entity.setAge(cursor.getLong(offset + 72));
        entity.setMoney(cursor.getDouble(offset + 73));
        entity.setRealName(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setCredit(cursor.getDouble(offset + 75));
        entity.setRemark(cursor.isNull(offset + 76) ? null : cursor.getString(offset + 76));
        entity.setUpdateTime(cursor.getLong(offset + 77));
        entity.setLastTenderTime(cursor.isNull(offset + 78) ? null : cursor.getString(offset + 78));
        entity.setCreditTime2(cursor.isNull(offset + 79) ? null : cursor.getString(offset + 79));
        entity.setRepays(cursor.isNull(offset + 80) ? null : cursor.getString(offset + 80));
        entity.setImageUrlByIphone(cursor.isNull(offset + 81) ? null : cursor.getString(offset + 81));
        entity.setGivePhone(cursor.isNull(offset + 82) ? null : cursor.getString(offset + 82));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FinanceProduct entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FinanceProduct entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
